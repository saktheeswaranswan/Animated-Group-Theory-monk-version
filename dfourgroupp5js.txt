// --- GLOBALS ---
let corners = [
  { label: 'A', x: 100, y: 100 },
  { label: 'B', x: 300, y: 100 },
  { label: 'C', x: 300, y: 300 },
  { label: 'D', x: 100, y: 300 }
];

let transforms = {
  e:   [0, 1, 2, 3],
  r:   [3, 0, 1, 2],
  r2:  [2, 3, 0, 1],
  r3:  [1, 2, 3, 0],
  s:   [1, 0, 3, 2],
  sr:  [2, 1, 0, 3],
  sr2: [3, 2, 1, 0],
  sr3: [0, 3, 2, 1]
};

let current = 'e', target = 'e';
let animProgress = 0;
let buttons = [];
let tableElems = Object.keys(transforms);
let selA = null, selB = null;
let products = {};

function computeProducts() {
  tableElems.forEach(a => {
    products[a] = {};
    tableElems.forEach(b => {
      let p = transforms[a].map((t, i) => transforms[b][t]);
      tableElems.forEach(k => {
        if (JSON.stringify(p) === JSON.stringify(transforms[k])) {
          products[a][b] = k;
        }
      });
    });
  });
}

function setup() {
  createCanvas(420, 820);
  angleMode(DEGREES);
  textAlign(CENTER, CENTER);
  computeProducts();

  tableElems.forEach((k, i) => {
    let b = createButton(k);
    b.position(20 + i * 40, 360);
    b.mousePressed(() => startAnimation(k));
    buttons.push(b);
  });
}

function startAnimation(k) {
  if (k === target) return;
  target = k;
  animProgress = 0;
  selA = selB = null;
}

function draw() {
  background(255);
  if (animProgress < 1) {
    animProgress += 0.05;
    if (animProgress >= 1) {
      animProgress = 1;
      current = target;
    }
  }
  drawLabel(`Current: ${current}`, 20, 20);
  drawSquare();
  drawArrows();
  drawArrowMappingDiagram();
  drawCayleyTable();
  drawCayleyGraph();
  drawMorphisms();
}

function drawSquare() {
  noFill(); stroke(200);
  rect(100, 100, 200, 200);
  push(); translate(200, 200);
  applyAnimatedTransform(current, target, animProgress);
  noFill(); stroke(0);
  rect(-100, -100, 200, 200);
  pop();

  fill(0); noStroke(); textSize(16);
  corners.forEach(c => {
    let dx = (c.label == 'B' || c.label == 'C') ? 10 : -10;
    let dy = (c.label == 'C' || c.label == 'D') ? 10 : -10;
    text(c.label, c.x + dx, c.y + dy);
  });
}

function applyAnimatedTransform(a, b, t) {
  let angles = { e: 0, r: 90, r2: 180, r3: 270 };
  let a0 = angles[a] || 0, b0 = angles[b] || 0;
  let ang = lerp(a0, b0, t);
  let f0 = a.startsWith('s') ? -1 : 1;
  let f1 = b.startsWith('s') ? -1 : 1;
  let sx = lerp(f0, f1, t);
  rotate(ang); scale(sx, 1);
}

function drawArrows() {
  stroke(200, 0, 0); fill(200, 0, 0); strokeWeight(2);
  let k = animProgress < 1 ? current : target;
  transforms[k].forEach((t, i) => drawArrow(corners[i].x, corners[i].y, corners[t].x, corners[t].y));
}

function drawArrow(x1, y1, x2, y2) {
  let off = 10, ang = atan2(y2 - y1, x2 - x1), d = dist(x1, y1, x2, y2);
  let xb = x1 + cos(ang) * (d - off), yb = y1 + sin(ang) * (d - off);
  line(x1, y1, xb, yb);
  push(); translate(xb, yb); rotate(ang);
  triangle(0, 0, -off, 5, -off, -5);
  pop();
}

function drawArrowMappingDiagram() {
  let x0 = 50, y0 = 260, spacing = 40;
  let domain = [], codomain = [];
  let k = animProgress < 1 ? current : target;
  let mapping = transforms[k];

  // Draw ellipses
  noFill(); stroke(0);
  ellipse(x0 + 40, y0 + 60, 40, 180);
  ellipse(x0 + 200, y0 + 60, 40, 180);

  // Draw elements and store positions
  for (let i = 0; i < 4; i++) {
    let dy = i * spacing;
    let x1 = x0 + 40;
    let x2 = x0 + 200;
    let y = y0 + dy;

    noStroke(); fill(0); textSize(14);
    text(i, x1, y);
    text(mapping[i], x2, y);

    domain.push({ x: x1 + 10, y: y });
    codomain.push({ x: x2 - 10, y: y });
  }

  // Draw arrows
  stroke(0, 100, 255); strokeWeight(2); fill(0, 100, 255);
  for (let i = 0; i < 4; i++) {
    let from = domain[i];
    let toIndex = mapping[i];
    let to = codomain[toIndex];
    line(from.x, from.y, to.x, to.y);
    drawSmallArrowhead(from.x, from.y, to.x, to.y);
  }

  // Labels
  noStroke(); fill(0); textSize(12);
  text("Domain", x0 + 40, y0 - 30);
  text("Codomain", x0 + 200, y0 - 30);
}

function drawSmallArrowhead(x1, y1, x2, y2) {
  let angle = atan2(y2 - y1, x2 - x1);
  let size = 6;
  push();
  translate(x2, y2);
  rotate(angle);
  triangle(0, 0, -size, size / 2, -size, -size / 2);
  pop();
}

function drawCayleyTable() {
  let x0 = 20, y0 = 420, sz = 25;
  textSize(12); fill(0); noStroke();
  tableElems.forEach((e, i) => {
    text(e, x0 + (i + 1) * sz + sz / 2, y0 + sz / 2);
    text(e, x0 + sz / 2, y0 + (i + 1) * sz + sz / 2);
  });

  tableElems.forEach((r, i) =>
    tableElems.forEach((c, j) => {
      let x = x0 + (j + 1) * sz;
      let y = y0 + (i + 1) * sz;
      if (r === current || c === current) fill(173, 216, 230);
      else if (r === selA || c === selB) fill(230);
      else fill(255);
      stroke(180); rect(x, y, sz, sz);
      noStroke(); fill(0);
      text(products[r][c], x + sz / 2, y + sz / 2);
    })
  );
}

function drawCayleyGraph() {
  let cx = 200, cy = 650, r = 80;
  let pos = tableElems.map((_, i) => {
    let ang = 360 * i / tableElems.length - 90;
    return { x: cx + cos(ang) * r, y: cy + sin(ang) * r };
  });

  strokeWeight(2);
  tableElems.forEach((k, i) => {
    let jr = tableElems.indexOf(products['r'][k]);
    stroke(255, 0, 0);
    line(pos[i].x, pos[i].y, pos[jr].x, pos[jr].y);

    let js = tableElems.indexOf(products['s'][k]);
    stroke(0, 0, 255);
    line(pos[i].x, pos[i].y, pos[js].x, pos[js].y);
  });

  noFill(); stroke(150); strokeWeight(1);
  circle(cx, cy, 2 * r + 20);

  tableElems.forEach((k, i) => {
    fill(255); stroke(0); circle(pos[i].x, pos[i].y, 24);
    noStroke(); fill(0); textSize(10);
    text(k, pos[i].x, pos[i].y);
  });

  noFill(); stroke(100, 100, 255); strokeWeight(1.5);
  beginShape();
  for (let step = 0; step < tableElems.length; step++) {
    let idx = (step * 2) % tableElems.length;
    vertex(pos[idx].x, pos[idx].y);
  }
  endShape(CLOSE);
}

function drawMorphisms() {
  let labs = ['Injective', 'Surjective', 'Bijective', 'Manyâ†’1'];
  for (let m = 0; m < 4; m++) {
    let x0 = 20 + m * 95, y0 = 750;
    for (let i = 0; i < 3; i++) fill(0), circle(x0 + i * 20, y0, 6);
    for (let j = 0; j < 3; j++) fill(0), circle(x0 + j * 20 + 10, y0 + 40, 6);
    stroke(0); strokeWeight(1);
    if (m === 0 || m === 2) for (let i = 0; i < 3; i++) line(x0 + i * 20, y0 + 3, x0 + i * 20 + 10, y0 + 37);
    else if (m === 1) {
      line(x0, y0 + 3, x0 + 10, y0 + 37);
      line(x0 + 20, y0 + 3, x0 + 30, y0 + 37);
      line(x0 + 40, y0 + 3, x0 + 30, y0 + 37);
    } else {
      line(x0, y0 + 3, x0 + 10, y0 + 37);
      line(x0 + 20, y0 + 3, x0 + 10, y0 + 37);
      line(x0 + 40, y0 + 3, x0 + 30, y0 + 37);
    }
    noStroke(); fill(0); textSize(12);
    text(labs[m], x0 + 20, y0 + 60);
  }
}

function drawLabel(t, x, y) {
  noStroke(); fill(0); textSize(14); text(t, x, y);
}

function mousePressed() {
  let x0 = 20, y0 = 420, sz = 25;
  for (let i = 0; i < tableElems.length; i++) {
    let hx = x0 + (i + 1) * sz, hy = y0;
    if (mouseX > hx && mouseX < hx + sz && mouseY > hy && mouseY < hy + sz) {
      selB = tableElems[i]; return;
    }
    let vx = x0, vy = y0 + (i + 1) * sz;
    if (mouseX > vx && mouseX < vx + sz && mouseY > vy && mouseY < vy + sz) {
      selA = tableElems[i]; return;
    }
  }
}
